Ayush Chamola
I am learning Git and Git Hub








                               ***************Git Commands*****************


* touch file_name.file_extension --> to create a file
* mkdir directory_name --> to create a folder
* git init --> to make an empty git repositry, so that histroy can be saved in that folder (.git)
* git add . -->to add all the untracked file to the staging area
* git add file_name --> to add individual file to staging area
* git status --> to check the status of the project, whether files are deleted/created/modified/at staging area
* vim file_name --> to edit a file
* cat file_name --> to display the content inside the file
* rm -rv file_name --> to delete a file
* rm -rf file name -->  "   "    "   "
* git reset  HEAD -- file_name--> to remove individual file from staging area
* git restore --staged file_name --> remove file from staging
 area
* git reset --> remove all file from staging area
* git commit -m "message to display" --> to commit the change
* git log --> to see the history of project
* press q --> to come out of help file in git
* git stash --> It saves the uncommitted changes locally, allowing to perform other changes
* git stash pop --> It brings the file from stash to unstaged area
* git stash clear --> It clear all the file from stash, means no file to pop in unstaged area
* git remote add Repo-URL-name(by deafult it is origin) url-link --> add Git-Hub URL to the working Directoy of the PC
* git remote -v --> shows all the git hib url attached to our local directory
* git push origin(url name) master(branch name) --> It will push  all the changes and history of our project to our Git-Hub directory
(push means --> push the changes,,,, origin means --> to which url you want to push the change,,,, master mebas --> to which branch you want to add this

* git clone url --> downoad the files from the url to local pc
* git remote add copied-Repo-url-name url-link --> it will add this repo to the working pc
* git branch branch-name --> new branch will be created
* git checkout branch-name --> now HEAD will point to new branch










                                 **************IMPORTANT******************
IMPT1-->


History of deleted (means the file should be commmited) file should be saved in out .git directory, only then we can restore it 


If we delete a file from our directory and commit that change, then we can restore that file
step 1 --> first we have to commit the change of deleting the file
step 2 --> then we have to copy the previous commit link
step 3 --> git reset prev_git_command
step 4 --> git restore file_name
file will be restored


IMPT2-->


git remote add origin link-Of-GitHub-Repo
remote means working with URl's
add means adding the url
**origin --> Name of the url (similar to the name we have while saving a phone nos, we don't remember phone no we remember 
name), by default all the name of the Repository URl's in the personal Git-Hub starts with *origin*


IMPT3-->


Histroy of project is saved inside .git directory
Inside .git folder there is head.

Q. what is a HEAD?
ANS-> HEAD is basically a pointer which points to the branch where the commit will be stored


IMPT4-->


we have to push the file to staging area then only we can move it stash area
stash means backstage


*IMPT5 -->


Downloading files from git directory to pc
step 1 - first copy the code link of the repo
step 2 --> run this command in your pc 
git clone url 


IMPT6-->


You can directly make changes to any project into anyone account in Git-Hub, you have to fork that project

fork basically means copying that project files into your Git-Hub account


IMPT7-->


url of our own repo is called *origin* 
Repo(url of that project) from where we froked(copied) the project known as *upstream*


IMPT8-->


If you forked someone project in your Git-Hub account then the person whose project you have forked he can not make
changes to the forked project in your account.

Ques**---> (How to maintain the main branch of upstream and the main brnach of our forked project always run parallel)  
How to maintain your forked project file with the original one if someone gets merged there code in the main account
(without forking the project and without cloning it again)

step1 -- first you have to add the upstream Url to your local directory
command --> git remote add upstream url-link      (upstream is the default name of others url like we have origin)

step2 -- now we have to fetch all the commits from upstream main branch 
command --> git fetch -all --prune
fetch means getting the commits .... all means fetch all the commits from our secondary branches and upstream main 
branch ... prune means get all the deleted commits also

step3 --> Now we have to reset the main of our origin with the main branch of upstream, so that all the changes in
upstream main branch will be visible in origin main branch
command --> git reset --hard upstream/main-branch-name

step4 --> Now push the changes to main branch of forked directory


IMPT9-->


whenever error like permission denied came while pushing the changes to remote repo always check windows credential manager 


